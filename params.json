{"tagline":"A tiny JavaScript library that help use localStorage and sessionStorage (HTML5 API)","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Storage.js","google":"","body":"# storage.js\r\nA tiny JavaScript library that help use localStorage and sessionStorage (HTML5 API)\r\n\r\n## Usage\r\nDownload storage.min.js (~1.271 kb) and include it in your HTML document:\r\n\r\n```html\r\n<script src=\"storage.min.js\"></script>\r\n```\r\n\r\nIf you include storage.js as above, this script will add an object called `storage` to your global scope.\r\n\r\n\r\n---\r\n\r\nstorage.js also supports AMD. So if you want to include storage.js dynamically, you can just require it with any AMD loader, for example [RequireJS](http://requirejs.org/).\r\nFollow the instructions of your AMD loader to include storage.js.\r\n\r\n---\r\n\r\n\r\nAfter that you can call any of methods that are explained in the following.\r\n\r\n\r\n## Choose between local or session\r\n\r\n```javascript\r\nstorage.type = localStorage; // or sessionStorage\r\n```\r\n\r\n\r\n## storage.enabled()\r\n\r\n```javascript\r\nif (storage.enabled()) {\r\n  // Do stuff with local/session storage\r\n} else {\r\n  // Fallback\r\n}\r\n```\r\n\r\n\r\n## storage.set(name, value)\r\n\r\n```javascript\r\nstorage.set(name, value);\r\n```\r\n\r\nYou can also set several values at once:\r\n\r\n```javascript\r\nstorage.set({\r\n   key1: 'value1',\r\n   key2: 'value2'\r\n});\r\n```\r\n\r\n\r\n## storage.get(name)\r\n\r\n```javascript\r\nstorage.get(name);\r\n```\r\n\r\nPassing just one key like this will return a string. You can also pass an array of keys:\r\n\r\n```javascript\r\nstorage.get(['key1', 'key2']);\r\n```\r\n\r\nThis will always return an object. The keys of this object will be the keys you passed and the values are the corresponding values.\r\n\r\nIn case you want to add a default value you can use the second parameter.\r\n\r\n```javascript\r\nstorage.get('key', 'default value');\r\n```\r\n\r\nThis also works with several keys:\r\n\r\n```javascript\r\nstorage.get(['key1', 'key2'], 'default value');\r\n```\r\n\r\n\r\n## storage.del(name)\r\n\r\nThis method allows you to remove datas. It accepts an infinite number of keys or an array of keys.\r\n\r\n```javascript\r\nstorage.del('key');\r\nstorage.del('key1', 'key2');\r\nstorage.del(['key1', 'key2']);\r\n```\r\n\r\n\r\n## storage.clear()\r\nSimply call `storage.clear()` and every datas will be removed.\r\n\r\n\r\n## storage.all()\r\n\r\n```javascript\r\nvar datas = storage.all();\r\n```\r\n\r\n\r\n## storage.change()\r\n/!\\ TODO - Event catch\r\n\r\n\r\n## Chaining\r\nThe methods `set`, `del`, `clear` and `change` return the storage object and therefore enable chaining.\r\n\r\n```javascript\r\nstorage.clear().change(function(){ alert('Storage change!') }).set('key', 'value').get('key');\r\n```\r\n\r\n\r\n## Contribute\r\nIf you find any bugs in this script or have ideas how to improve it please let me know by creating an [issue](https://github.com/monkeymonk/storage.js/issues). \r\n\r\nYou are also very welcome to contribute to the code here on github.\r\n\r\n\r\nEnjoy!"}